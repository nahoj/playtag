version: '3'

vars:
  # Use XDG paths with fallbacks
  XDG_DATA_HOME: '{{default .XDG_DATA_HOME (joinPath .HOME "/.local/share")}}'
  XDG_CONFIG_HOME: '{{default .XDG_CONFIG_HOME (joinPath .HOME "/.config")}}'
  XDG_BIN_HOME: '{{default .XDG_BIN_HOME (joinPath .HOME "/.local/bin")}}'
  
  # Application directories
  BINDIR: '{{.XDG_BIN_HOME}}'
  APPSDIR: '{{joinPath .XDG_DATA_HOME "/applications"}}'

  # MPV script directory
  MPV_SCRIPTS_DIR: '{{joinPath .XDG_CONFIG_HOME "/mpv/scripts"}}'
  
  # Implementation selection (python or ruby)
  IMPLEMENTATION: '{{default .IMPLEMENTATION "python"}}'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  mkdir:
    desc: Create necessary directories
    internal: true
    cmds:
      - mkdir -p {{.BINDIR}} {{.APPSDIR}} {{.MPV_SCRIPTS_DIR}}

  install:
    desc: Install playtag, desktop file, and player scripts
    summary: |
      Installs all components to their respective XDG directories:
      - playtag executable to {{.BINDIR}}
      - Desktop file to {{.APPSDIR}}
      - MPV script to {{.MPV_SCRIPTS_DIR}}
    deps: [mkdir]
    cmds:
      - |
        if [ "{{.IMPLEMENTATION}}" = "ruby" ]; then
          cp -f playtag-ruby {{.BINDIR}}/playtag
          echo "Installed Ruby implementation as playtag"
        else
          cp -f playtag-python {{.BINDIR}}/playtag
          echo "Installed Python implementation as playtag"
        fi
      - cp -f vlc+playtag.desktop {{.APPSDIR}}
      - cp -f mpv/playtag_lib.lua {{.MPV_SCRIPTS_DIR}}
      - cp -f mpv/playtag.lua {{.MPV_SCRIPTS_DIR}}
      - echo "Installation complete!"

  lninstall:
    desc: Install playtag and related files using symlinks
    summary: Creates symlinks instead of copying files
    deps: [mkdir]
    cmds:
      - |
        if [ "{{.IMPLEMENTATION}}" = "ruby" ]; then
          ln -fs {{.TASKFILE_DIR}}/playtag-ruby {{.BINDIR}}/playtag
          echo "Symlinked Ruby implementation as playtag"
        else
          ln -fs {{.TASKFILE_DIR}}/playtag-python {{.BINDIR}}/playtag
          echo "Symlinked Python implementation as playtag"
        fi
      - ln -fs {{.TASKFILE_DIR}}/vlc+playtag.desktop {{.APPSDIR}}
      - ln -fs {{.TASKFILE_DIR}}/mpv/playtag_lib.lua {{.MPV_SCRIPTS_DIR}}
      - ln -fs {{.TASKFILE_DIR}}/mpv/playtag.lua {{.MPV_SCRIPTS_DIR}}
      - echo "Symlink installation complete!"
    status:
      - test -L {{.BINDIR}}/playtag
      - test -L {{.APPSDIR}}/vlc+playtag.desktop
      - test -L {{.MPV_SCRIPTS_DIR}}/playtag_lib.lua
      - test -L {{.MPV_SCRIPTS_DIR}}/playtag.lua

  remove:
    desc: Remove playtag and related files
    summary: Removes all installed components
    cmds:
      - rm -f {{.BINDIR}}/playtag {{.APPSDIR}}/vlc+playtag.desktop {{.MPV_SCRIPTS_DIR}}/playtag*.lua
      - echo "Removal complete!"

  bundle:
    desc: Install Ruby dependencies via Bundler
    summary: Sets up the Ruby environment with required gems
    cmds:
      - |
        if command -v bundle >/dev/null 2>&1; then
          bundle install
        else
          echo "Bundler not found. Please install it with: gem install bundler"
          exit 1
        fi

  ruby:
    desc: Set Ruby as the implementation to use
    cmds:
      - echo "Setting Ruby as the implementation for playtag"
      - task: install
        vars: {IMPLEMENTATION: ruby}

  python:
    desc: Set Python as the implementation to use
    cmds:
      - echo "Setting Python as the implementation for playtag"
      - task: install
        vars: {IMPLEMENTATION: python}

  doc:
    desc: Generate README.html from README.md
    sources:
      - README.md
    generates:
      - README.html
    cmds:
      - pandoc -s -f markdown_github README.md -o README.html
      - echo "Generated README.html"
    status:
      - test README.md -nt README.html

  clean:
    desc: Remove generated files
    cmds:
      - rm -f README.html
      - echo "Cleanup complete!"
